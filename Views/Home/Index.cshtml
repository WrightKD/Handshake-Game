
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Airport Explorer</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css' rel='stylesheet' />
    <link rel="stylesheet" href="css/w3.css">
    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 50px;
            bottom: 50px;
            width: 100%;
        }
        .UIText{
            font-family: "Great Vibes", cursive;
        }
    </style>

</head>
<body>
    <div class="w3-sidebar  UIText w3-dark-grey w3-bar-block w3-card w3-animate-right" style="display:none;right:0;" id="rightMenu">
        <button onclick="closeRightMenu()" class="w3-bar-item w3-button w3-large">Close &times;</button>
        <h5 class=" w3-padding UIText">SHOP</h5>
        <a href="#" class="w3-bar-item w3-button" onclick="sanitise()">Sanitizer: 10 Gold</a>
        <a href="#" class="w3-bar-item w3-button" onclick="getShopData()">Mask: 50 Gold</a>
        <h5 class=" w3-padding UIText">USER</h5>
        <a href="#" class="w3-bar-item w3-button" onclick="buySanitiser()">Logout</a>
    </div>
    <div id="statsBar" class="w3-row UIText ">
        <div class="w3-col m2 w3-dark-grey w3-center"><p>XP: 100</p></div>
        <div class="w3-col m2 w3-dark-grey w3-center"><p>Body: Healthy</p></div>
        <div class="w3-col m2 w3-dark-grey w3-center"><p>Hands: Clean</p></div>
        <div class="w3-col m2 w3-dark-grey w3-center"><p>Sanitizer: 10x</p></div>
        <div class="w3-col m2 w3-dark-grey w3-center"><p>Gold: 100</p></div>
        <div class="w3-col m2 w3-dark-grey w3-center">
            <button class="w3-button w3-xlarge" onclick="openRightMenu()">&#9776;</button>
        </div>
    </div>
    <div id='map'></div>
    <div id="CovidBar" class="w3-row UIText w3-dark-grey" style="position: relative;">
  
    </div>
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.js'></script>

    <script>
        var playerLat = -26.170458
        var playerLong = 28.0519267 
        mapboxgl.accessToken = 'pk.eyJ1Ijoid3JpZ2h0a2QiLCJhIjoiY2thN3duNW42MDR5bjJ3c2JibGZjdTc5aSJ9.WfzsXOP8KI0_PVo9su3ubw';

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v10',
            zoom: 16,
            minZoom: 16,
            maxZoom: 17,
            center: [ playerLong, playerLat,]
        });

        var nav = new mapboxgl.NavigationControl();

        map.addControl(nav, 'bottom-right');

        map.on('load',
            () => {

                map.loadImage('https://cdn4.iconfinder.com/data/icons/space-mono/64/satellite-512.png', function (error, image) {
                    if (error) throw error;
                    map.addImage('ISS', image);
                });

                /* map.loadImage('https://upload.wikimedia.org/wikipedia/commons/thumb/8/88/Map_marker.svg/200px-Map_marker.svg.png', function (error, image) {
                     if (error) throw error;
                     map.addImage('npc_image', image);
                 });
                 console.log(map.listImages());*/


                map.addSource("airports",
                    {
                        type: "geojson",
                        //data: "/home/location"
                    });

                map.addLayer({
                    id: 'airport',
                    type: 'symbol',
                    source: 'airports',
                    layout: {
                        'icon-image': ['get', 'icon'],
                        'icon-size': 0.15
                    }
                });

                initGameData();
            });

        function openRightMenu() {
            document.getElementById("rightMenu").style.display = "block";
        }

        function closeRightMenu() {
            document.getElementById("rightMenu").style.display = "none";
        }

        document.getElementById("CovidBar").style.top = (document.getElementById("map").offsetHeight - 2) + "px";

        const getData = async () => {

            var response = await fetch('/Home/GetCovidStats');
            console.log(response)
            var data = await response.json();
            return data.rsa
        }

        getData().then((stats) => {
            console.log("in dot then")
            console.log(stats)
            var list = ''
            for (const [key, value] of Object.entries(stats)) {
                list += '<div style="width: 10%" class="w3-col l2 w3-dark-grey w3-center"><p>' + key.toUpperCase() + ': ' + value[0].cases[value[0].cases.length - 1] +'</p></div>'
            }
            document.getElementById("CovidBar").innerHTML = list;
        });

        //need to do stuff with data.IsInfected and data.ItemCount
        const sanitise = async () => {
            var response = await fetch('/Game/Sanitise');
            var data = await response.json();
            console.log("Infected: " + data.isInfected +"\nSanitiser: " + data.sanitiserCount);
            return data;
        }

        const getPlayerData = async () => {
            var response = await fetch('/Game/ShakeHand');
            var data = await response.json();
            return data;
            //console.log(data);
        }

        getPlayerData().then((stats) => {
           // console.log(stats);
        });

        const getNPCData = async () => {
            var response = await fetch('/Game/GetNPCData');
            var data = await response.json();
           // console.log(data);
            return data;
        }

        getNPCData().then((data) => {
            //console.log(data);
        });

        const initialiseShopData = async () => {
            var response = await fetch('/Game/InitialiseShops');
            var data = await response.json();
            console.log("Shops: ");
            console.log(data);
            return data;
        }


        const getShopData = async () => {
            var response = await fetch('/Game/GetShopInventory');
            var data = await response.json();
            console.log("ShopInventory: ");
            console.log(data);
            return data;
        }

        const buySanitiser = async () => {
            var response = await fetch('/Game/BuySanitiser?shopId=0');
            var data = await response.json();
            //console.log("BuySanitiser: ");
            console.log(data);
            return data;
        }

        /*const initialiseNPCData = async () => {
            var response = await fetch('/Game/test?a=0.1');
            var data = await response.json();
            console.log(data);
        }

        initialiseNPCData().then((data2) => {
            console.log(data2);
        });*/

        const initialiseNPCData = async () => {
            var response = await fetch('/Game/InitialiseNPCs?latitude=-26.170458&longitude=28.0519267');
            var data = await response.json();
            //console.log(data);
            return data;
        }

        const shakeHand = async () => {
            var response = await fetch('/Game/ShakeHand');
            var data = await response.json();
            //console.log(data);
            return data;
        }

        function initGameData() {
            //inits all NPCs
            initialiseNPCData().then((data) => {
                console.log(data[0].longitude);
                map.addSource('npcs_source', {
                    'type': 'geojson',
                    'data': {
                        'type': 'FeatureCollection',
                        'features': []
                    }
                });
                data.forEach((item) => {
                    //console.log("a:");
                    //console.log(a);
                    map.getSource('npcs_source')._data.features.push({
                        'type': 'Feature',
                        'properties': {
                            'description': "<strong>" + item.name + "</strong><p>" + item.description + "</p>"
                        },
                        'geometry': {
                            'type': 'Point',
                            'coordinates': [
                                item.longitude,
                                item.latitude
                            ]
                        }
                    })
                })
               // console.log(map.getSource('npcs_source'));
                map.getSource('npcs_source').setData(map.getSource('npcs_source')._data);
                //console.log(map.listImages());
                map.addLayer({
                    'id': 'npcs_layer',
                    'type': 'symbol',
                    'source': 'npcs_source',
                    'layout': {
                        'icon-image': 'volcano-15', //this needs to be changed
                        'icon-size': 2
                    }
                });

                var npcPopup = new mapboxgl.Popup({
                    closeButton: false,
                    closeOnClick: false
                });


                // Center the map on the coordinates of any clicked symbol from the 'symbols' layer.
                map.on('click', 'npcs_layer', function (e) {
                    //map.flyTo({ center: e.features[0].geometry.coordinates });
                    shakeHand().then((data) => {
                        console.log('score: '+ data.scoreCurrent + '\nlevel: ' + data.level);
                    });
                });

                // Change the cursor to a pointer when the it enters a feature in the 'symbols' layer.
                map.on('mouseenter', 'npcs_layer', function (e) {
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var description = e.features[0].properties.description;

                    npcPopup
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(map);
                });

                // Change it back to a pointer when it leaves.
                map.on('mouseleave', 'npcs_layer', function () {
                    map.getCanvas().style.cursor = '';
                    npcPopup.remove();
                });
                initialiseShopData();

                 console.log(map.getLayer('npcs_layer'));
            });
        };

    </script>

</body>
</html>

